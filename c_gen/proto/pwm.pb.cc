// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/pwm.proto

#include "/home/fausto/protobuff/c_gen/proto/pwm.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace pwm {
constexpr PWM::PWM(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : motor1_(0)
  , motor2_(0)
  , motor3_(0)
  , motor4_(0){}
struct PWMDefaultTypeInternal {
  constexpr PWMDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PWMDefaultTypeInternal() {}
  union {
    PWM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PWMDefaultTypeInternal _PWM_default_instance_;
}  // namespace pwm
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fpwm_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2fpwm_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fpwm_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fpwm_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pwm::PWM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pwm::PWM, motor1_),
  PROTOBUF_FIELD_OFFSET(::pwm::PWM, motor2_),
  PROTOBUF_FIELD_OFFSET(::pwm::PWM, motor3_),
  PROTOBUF_FIELD_OFFSET(::pwm::PWM, motor4_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pwm::PWM)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pwm::_PWM_default_instance_),
};

const char descriptor_table_protodef_proto_2fpwm_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017proto/pwm.proto\022\003pwm\"E\n\003PWM\022\016\n\006motor1\030"
  "\001 \001(\001\022\016\n\006motor2\030\002 \001(\001\022\016\n\006motor3\030\003 \001(\001\022\016\n"
  "\006motor4\030\004 \001(\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fpwm_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fpwm_2eproto = {
  false, false, 101, descriptor_table_protodef_proto_2fpwm_2eproto, "proto/pwm.proto", 
  &descriptor_table_proto_2fpwm_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_proto_2fpwm_2eproto::offsets,
  file_level_metadata_proto_2fpwm_2eproto, file_level_enum_descriptors_proto_2fpwm_2eproto, file_level_service_descriptors_proto_2fpwm_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_proto_2fpwm_2eproto_getter() {
  return &descriptor_table_proto_2fpwm_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_proto_2fpwm_2eproto(&descriptor_table_proto_2fpwm_2eproto);
namespace pwm {

// ===================================================================

class PWM::_Internal {
 public:
};

PWM::PWM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pwm.PWM)
}
PWM::PWM(const PWM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&motor1_, &from.motor1_,
    static_cast<size_t>(reinterpret_cast<char*>(&motor4_) -
    reinterpret_cast<char*>(&motor1_)) + sizeof(motor4_));
  // @@protoc_insertion_point(copy_constructor:pwm.PWM)
}

inline void PWM::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&motor1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&motor4_) -
    reinterpret_cast<char*>(&motor1_)) + sizeof(motor4_));
}

PWM::~PWM() {
  // @@protoc_insertion_point(destructor:pwm.PWM)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PWM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PWM::ArenaDtor(void* object) {
  PWM* _this = reinterpret_cast< PWM* >(object);
  (void)_this;
}
void PWM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PWM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PWM::Clear() {
// @@protoc_insertion_point(message_clear_start:pwm.PWM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&motor1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&motor4_) -
      reinterpret_cast<char*>(&motor1_)) + sizeof(motor4_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PWM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double motor1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          motor1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double motor2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          motor2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double motor3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          motor3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double motor4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          motor4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PWM::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pwm.PWM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double motor1 = 1;
  if (!(this->_internal_motor1() <= 0 && this->_internal_motor1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_motor1(), target);
  }

  // double motor2 = 2;
  if (!(this->_internal_motor2() <= 0 && this->_internal_motor2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_motor2(), target);
  }

  // double motor3 = 3;
  if (!(this->_internal_motor3() <= 0 && this->_internal_motor3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_motor3(), target);
  }

  // double motor4 = 4;
  if (!(this->_internal_motor4() <= 0 && this->_internal_motor4() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_motor4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pwm.PWM)
  return target;
}

size_t PWM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pwm.PWM)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double motor1 = 1;
  if (!(this->_internal_motor1() <= 0 && this->_internal_motor1() >= 0)) {
    total_size += 1 + 8;
  }

  // double motor2 = 2;
  if (!(this->_internal_motor2() <= 0 && this->_internal_motor2() >= 0)) {
    total_size += 1 + 8;
  }

  // double motor3 = 3;
  if (!(this->_internal_motor3() <= 0 && this->_internal_motor3() >= 0)) {
    total_size += 1 + 8;
  }

  // double motor4 = 4;
  if (!(this->_internal_motor4() <= 0 && this->_internal_motor4() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PWM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PWM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PWM::GetClassData() const { return &_class_data_; }

void PWM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PWM *>(to)->MergeFrom(
      static_cast<const PWM &>(from));
}


void PWM::MergeFrom(const PWM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pwm.PWM)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_motor1() <= 0 && from._internal_motor1() >= 0)) {
    _internal_set_motor1(from._internal_motor1());
  }
  if (!(from._internal_motor2() <= 0 && from._internal_motor2() >= 0)) {
    _internal_set_motor2(from._internal_motor2());
  }
  if (!(from._internal_motor3() <= 0 && from._internal_motor3() >= 0)) {
    _internal_set_motor3(from._internal_motor3());
  }
  if (!(from._internal_motor4() <= 0 && from._internal_motor4() >= 0)) {
    _internal_set_motor4(from._internal_motor4());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PWM::CopyFrom(const PWM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pwm.PWM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PWM::IsInitialized() const {
  return true;
}

void PWM::InternalSwap(PWM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PWM, motor4_)
      + sizeof(PWM::motor4_)
      - PROTOBUF_FIELD_OFFSET(PWM, motor1_)>(
          reinterpret_cast<char*>(&motor1_),
          reinterpret_cast<char*>(&other->motor1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PWM::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fpwm_2eproto_getter, &descriptor_table_proto_2fpwm_2eproto_once,
      file_level_metadata_proto_2fpwm_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pwm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pwm::PWM* Arena::CreateMaybeMessage< ::pwm::PWM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pwm::PWM >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
