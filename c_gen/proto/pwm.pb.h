// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/pwm.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fpwm_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fpwm_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fpwm_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fpwm_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fpwm_2eproto;
namespace pwm {
class PWM;
struct PWMDefaultTypeInternal;
extern PWMDefaultTypeInternal _PWM_default_instance_;
}  // namespace pwm
PROTOBUF_NAMESPACE_OPEN
template<> ::pwm::PWM* Arena::CreateMaybeMessage<::pwm::PWM>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pwm {

// ===================================================================

class PWM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pwm.PWM) */ {
 public:
  inline PWM() : PWM(nullptr) {}
  ~PWM() override;
  explicit constexpr PWM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PWM(const PWM& from);
  PWM(PWM&& from) noexcept
    : PWM() {
    *this = ::std::move(from);
  }

  inline PWM& operator=(const PWM& from) {
    CopyFrom(from);
    return *this;
  }
  inline PWM& operator=(PWM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PWM& default_instance() {
    return *internal_default_instance();
  }
  static inline const PWM* internal_default_instance() {
    return reinterpret_cast<const PWM*>(
               &_PWM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PWM& a, PWM& b) {
    a.Swap(&b);
  }
  inline void Swap(PWM* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PWM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PWM* New() const final {
    return new PWM();
  }

  PWM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PWM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PWM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PWM& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PWM* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pwm.PWM";
  }
  protected:
  explicit PWM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMotor1FieldNumber = 1,
    kMotor2FieldNumber = 2,
    kMotor3FieldNumber = 3,
    kMotor4FieldNumber = 4,
  };
  // double motor1 = 1;
  void clear_motor1();
  double motor1() const;
  void set_motor1(double value);
  private:
  double _internal_motor1() const;
  void _internal_set_motor1(double value);
  public:

  // double motor2 = 2;
  void clear_motor2();
  double motor2() const;
  void set_motor2(double value);
  private:
  double _internal_motor2() const;
  void _internal_set_motor2(double value);
  public:

  // double motor3 = 3;
  void clear_motor3();
  double motor3() const;
  void set_motor3(double value);
  private:
  double _internal_motor3() const;
  void _internal_set_motor3(double value);
  public:

  // double motor4 = 4;
  void clear_motor4();
  double motor4() const;
  void set_motor4(double value);
  private:
  double _internal_motor4() const;
  void _internal_set_motor4(double value);
  public:

  // @@protoc_insertion_point(class_scope:pwm.PWM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double motor1_;
  double motor2_;
  double motor3_;
  double motor4_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fpwm_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PWM

// double motor1 = 1;
inline void PWM::clear_motor1() {
  motor1_ = 0;
}
inline double PWM::_internal_motor1() const {
  return motor1_;
}
inline double PWM::motor1() const {
  // @@protoc_insertion_point(field_get:pwm.PWM.motor1)
  return _internal_motor1();
}
inline void PWM::_internal_set_motor1(double value) {
  
  motor1_ = value;
}
inline void PWM::set_motor1(double value) {
  _internal_set_motor1(value);
  // @@protoc_insertion_point(field_set:pwm.PWM.motor1)
}

// double motor2 = 2;
inline void PWM::clear_motor2() {
  motor2_ = 0;
}
inline double PWM::_internal_motor2() const {
  return motor2_;
}
inline double PWM::motor2() const {
  // @@protoc_insertion_point(field_get:pwm.PWM.motor2)
  return _internal_motor2();
}
inline void PWM::_internal_set_motor2(double value) {
  
  motor2_ = value;
}
inline void PWM::set_motor2(double value) {
  _internal_set_motor2(value);
  // @@protoc_insertion_point(field_set:pwm.PWM.motor2)
}

// double motor3 = 3;
inline void PWM::clear_motor3() {
  motor3_ = 0;
}
inline double PWM::_internal_motor3() const {
  return motor3_;
}
inline double PWM::motor3() const {
  // @@protoc_insertion_point(field_get:pwm.PWM.motor3)
  return _internal_motor3();
}
inline void PWM::_internal_set_motor3(double value) {
  
  motor3_ = value;
}
inline void PWM::set_motor3(double value) {
  _internal_set_motor3(value);
  // @@protoc_insertion_point(field_set:pwm.PWM.motor3)
}

// double motor4 = 4;
inline void PWM::clear_motor4() {
  motor4_ = 0;
}
inline double PWM::_internal_motor4() const {
  return motor4_;
}
inline double PWM::motor4() const {
  // @@protoc_insertion_point(field_get:pwm.PWM.motor4)
  return _internal_motor4();
}
inline void PWM::_internal_set_motor4(double value) {
  
  motor4_ = value;
}
inline void PWM::set_motor4(double value) {
  _internal_set_motor4(value);
  // @@protoc_insertion_point(field_set:pwm.PWM.motor4)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace pwm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fpwm_2eproto
